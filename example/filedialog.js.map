{"version":3,"sources":["filedialog.litcoffee"],"names":["allExtensions","askToDeleteEntry","changeFolder","clearActionLinks","fileBrowserMode","fsToBrowse","icon","imitateDialog","makeActionLink","makeTable","rowOf3","setup","tellPage","validBrowserModes","indexOf","item","i","l","this","length","window","onmessage","e","fname","data","Array","shift","console","log","apply","message","parent","postMessage","FileSystem","setFileSystemName","name","updateFileBrowser","setFileBrowserMode","mode","call","fileBeingMoved","fileToBeOpened","selectFile","destination","cd","getCwd","setDialogImitation","enable","buttonClicked","args","folderName","path","prompt","mkdir","alert","slice","prototype","pathSeparator","push","saveFileName","value","unshift","full","copy","cp","mv","concat","onload","tinymce","activeEditor","windowManager","getParams","fsName","setTimeout","entry","confirm","rm","I","T","X","action","buttons","disable","entries","features","file","filter","folder","index","interior","j","k","len","len1","len2","oldIndex","oldName","ref","ref1","statusbar","text","title","titlebar","navigateFolders","deleteFolders","deleteFiles","createFolders","fileNameTextBox","filesDisabled","moveFiles","moveFolders","copyFiles","extensionFilter","toUpperCase","ls","sep","fileFilter","options","selectedIndex","saveBoxKeyPressed","results","ref2","join","document","body","innerHTML","focus","event","statusBarButtonSave","disabled","keyCode","half","lcolor","left","rcolor","result","right","Math","ceil","actionLinks","tooltip","func","number","more","F","extension","getName","exec","sort"],"mappings":"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","file":"filedialog.js","sourcesContent":["\nThis file is used by `filedialog.html` in the same folder, to provide a demo\nGUI for browsing a `jsfs` filesystem.\n\n# Communicating with the page\n\nThis web page is used inside an `<iframe>` of another page, and thus it uses\nmessage-passing (`onmessage` and `postMessage` calls) to communicate with\nthat outer page.\n\nWe therefore create two functions to handle this task.  The first one\nlistens for messages from the outer page and handles them by turning them\ninto function calls.  This permits the outer page to call any\n(already-defined) function in the inner page.  The message's data should be\nan array mimicking the function signature.  E.g., to call `f(a,b,c)`, send\nthe array `['f',a,b,c]` to this page using `postMessage`.\n\n    window.onmessage = ( e ) ->\n        if e.data not instanceof Array\n            return console.log 'Invalid message from page:', e.data\n        fname = e.data.shift()\n        if typeof window[fname] isnt 'function'\n            return console.log 'Cannot call non-function:', fname\n        window[fname].apply null, e.data\n\nThe second function that handles message-passing with the page is for\ncommunication in the other direction.  To tell the page any data, simply\npass it to the `tellPage` routine, and it will be posted to the containing\nwindow via `postMessage`.\n\n    tellPage = ( message ) -> window.parent.postMessage message, '*'\n\n# State variables\n\nThe following variables determine the state of this page.\n\n## Name of FileSystem to browse\n\nThis dialog can browse any filesystem stored in LocalStorage, but we choose\na default one for starters.\n\n    fsToBrowse = new FileSystem null\n\nWhen setting the name of the filesystem to browse, an entirely new\n`FileSystem` object is created.  The old one is discarded.\n\n    window.setFileSystemName = ( name ) ->\n        fsToBrowse = new FileSystem name\n        updateFileBrowser()\n\n## Browser mode\n\nIt can be in one of several modes, stored in a global variable, here.\n\n    fileBrowserMode = null\n\nHere are the valid modes, and a routine for changing the mode.  It\nautomatically calls the update function defined later for keeping the view\nfresh.\n\n    validBrowserModes = [\n        'manage files'\n        'open file'\n        'save file'\n        'open folder'\n        'save in folder'\n    ]\n    window.setFileBrowserMode = ( mode ) ->\n        fileBrowserMode = mode if mode in validBrowserModes\n        updateFileBrowser()\n\n## Moving a file\n\nWhen moving a file, we store in this global variable the name, folder, and\nabsolute path of the file being moved.\n\n    window.fileBeingMoved = { }\n\n## Opening a file\n\nWhen opening a file, one particular file will be selected before the user\nclicks the \"Open\" button.  This global variable records the name of that\nfile.  Only the name is needed, not the path, since only files in the\ncurrent directory can be selected.\n\n    window.fileToBeOpened = null\n    window.selectFile = ( name ) ->\n        window.fileToBeOpened = name\n        tellPage [ 'selectedFile', name ]\n        updateFileBrowser()\n\n## Changing folders\n\nWhenever the browser changes folders, several things must happen, so it is\nconvenient to collect them into one method.  First, the filesystem itself\nmust change its cwd.  Second, the page containing this browser must be\nnotified.  Finally, any selected file needs to be deselected, thus updating\nthe view.\n\n    changeFolder = ( destination ) ->\n        fsToBrowse.cd destination\n        tellPage [ 'changedFolder', fsToBrowse.getCwd() ]\n        selectFile null\n\n## Dialog imitation\n\nThis page can imitate a dialog box by adding a status bar and title bar;\nwhether to do so is stored in a global variable, here.\n\n    imitateDialog = no\n\nWhether to imitate a dialog can only be true or false, so we use `!!` to\ncoerce things to a boolean.\n\n    window.setDialogImitation = ( enable = yes ) ->\n        imitateDialog = !!enable\n        updateFileBrowser()\n\nIt's also important to be able to programmatically click buttons.  The\ndefault way this works is that the call is passed along to the `tellPage`\nfunction in `filedialog.html`, which, in turn, sends it to the containing\npage via inter-frame message passing.  If you re-use this demo UI in an\nactual application, this behavior can be overridden at either level; you can\nassign a new handler over this function, or over `tellPage`, whichever you\nprefer.\n\n    window.buttonClicked = ( name ) ->\n\nThe only button we handle internally is the \"New folder\" button.  All others\nare passed on to the page.\n\n        if name is 'New folder'\n            folderName = prompt 'Enter name of new folder', 'My Folder'\n            if fsToBrowse.mkdir folderName\n                updateFileBrowser()\n            else\n                alert 'That folder name is already in use.'\n            return\n\nAll other buttons are handled externally, but some need special processing\nbefore we pass to the page the information that a button was clicked.  We\nstore any additional information we'll be passing the page in the following\narguments list.\n\n        args = [ ]\n\nWhen passing the \"Save\" button, also pass the currently-chosen filename\nunder which to save.  But if a file is actually being moved, then send a\n\"move\" signal instead of a \"save\" signal.  The file will be moved right now,\nand the signal will indicate whether the move succeeded or failed.\n\n        if name is 'Save'\n            path = fsToBrowse.getCwd()\n            if path[-1..] isnt FileSystem::pathSeparator\n                path += FileSystem::pathSeparator\n            args.push path + saveFileName.value\n            if fileBeingMoved.name\n                args.unshift fileBeingMoved.full\n                if fileBeingMoved.copy\n                    success = fsToBrowse.cp fileBeingMoved.full,\n                        path + saveFileName.value\n                    name = if success then 'Copied' else 'Copy failed'\n                else\n                    success = fsToBrowse.mv fileBeingMoved.full,\n                        path + saveFileName.value\n                    name = if success then 'Moved' else 'Move failed'\n\nWhen passing the \"Save here\" button, also pass the current working\ndirectory.\n\n        if name is 'Save here' then args.push fsToBrowse.getCwd()\n\nWhen passing the \"Open\" button, also pass the full path to the file to open.\n\n        if name is 'Open'\n            path = fsToBrowse.getCwd()\n            if path[-1..] isnt FileSystem::pathSeparator\n                path += FileSystem::pathSeparator\n            args.push path + fileToBeOpened\n\nWhen passing the \"Open this folder\" button, also pass the cwd.\n\n        if name is 'Open this folder'\n            args.push fsToBrowse.getCwd()\n            name = 'Open folder'\n\nSend signal now.  Also, any button that was clicked in the status bar\ncompletes the job of this dialog, thus returning us to \"manage files\" mode,\nif the dialog even remains open.  Thus we make that change now.\n\n        tellPage [ 'buttonClicked', name ].concat args\n        window.fileBeingMoved = { }\n        selectFile null\n        setFileBrowserMode 'manage files'\n\n# Setup\n\nWhen the page loads, the following setup routine must get called.  It does\nseveral things.\n\n    window.onload = setup = ->\n\nFirst, it sets the default mode, which also populates the view, and notifies\nthe page of the initial cwd.\n\n        setFileBrowserMode 'manage files'\n        changeFolder '.'\n\nSecond, extract any parameters that TinyMCE passed when loading this dialog\n(which are given via the `getParams()` method of the top-level window's\nactive editor).\n\n        args = window.parent.tinymce.activeEditor.windowManager.getParams()\n\nIf the `fsName` parameter was passed, it is used as the filesystem name.\n\n        if args.fsName then setFileSystemName args.fsName\n\nIf the `mode` parameter was passed, it is used as the dialog mode.  It must\nnot be set immediately, because the dialog is still loading; it must be set\nafter a zero timeout.\n\n        if args.mode then setTimeout ( -> setFileBrowserMode args.mode ), 0\n\n# Editing utilities\n\nThe following function prompts the user, and if they agree, it deletes the\ngiven file or folder permanently.  If they disagree, it does nothing.  If it\ndeletes the file or folder, then it updates the browser.\n\n    askToDeleteEntry = ( entry ) ->\n        if confirm \"Are you sure you want to permantely delete #{entry}?\"\n            fsToBrowse.rm entry\n            updateFileBrowser()\n\n# Update\n\nEvery time the view needs to be updated, the update routine defined below\nwill do so.  It will recompute the HTML content of the document body and\nwrite it.\n\nThe update routine is as follows.\n\n    window.updateFileBrowser = ->\n\nWe will track the set of features that need to be enabled or disabled,\ndepending on the mode in which the dialog is operating.  This defaults to\nthe settings required for \"manage files\" mode.\n\n        features =\n            navigateFolders : yes\n            deleteFolders : yes\n            deleteFiles : yes\n            createFolders : yes\n            fileNameTextBox : no\n            filesDisabled : no\n            moveFiles : yes\n            moveFolders : yes\n            copyFiles : yes\n            extensionFilter : no\n            selectFile : no\n\nWe also set up other defaults, for title bar and status bar content.\n\n        title = if fileBrowserMode then \\\n            fileBrowserMode[0].toUpperCase() + fileBrowserMode[1..] \\\n            else ''\n        buttons = [ ]\n\nNow we update the above default options based on the current mode.  If the\nmode has somehow been set to an invalid value, the defaults will hold.\n\n        if fileBrowserMode is 'manage files'\n            buttons = [ 'New folder', 'Done' ]\n        else if fileBrowserMode is 'save file'\n            features.deleteFolders = features.deleteFiles =\n                features.moveFiles = features.moveFolders =\n                features.copyFiles = no\n            features.fileNameTextBox = yes\n            title = 'Save as...'\n            buttons = [ 'Cancel', 'Save' ]\n            if imitateDialog then buttons.unshift 'New folder'\n        else if fileBrowserMode is 'save in folder'\n            features.deleteFolders = features.deleteFiles =\n                features.moveFiles = features.moveFolders =\n                features.copyFiles = no\n            features.filesDisabled = yes\n            title = 'Save in...'\n            buttons = [ 'New folder', 'Cancel', 'Save here' ]\n        else if fileBrowserMode is 'open file'\n            features.deleteFolders = features.deleteFiles =\n                features.moveFiles = features.moveFolders =\n                features.copyFiles = no\n            features.extensionFilter = features.selectFile = yes\n            buttons = [ 'Cancel', 'Open' ]\n        else if fileBrowserMode is 'open folder'\n            features.deleteFolders = features.deleteFiles =\n                features.moveFiles = features.moveFolders =\n                features.copyFiles = no\n            features.filesDisabled = yes\n            buttons = [ 'Cancel', 'Open this folder' ]\n\nWe will store in the following array the set of entries that will show up in\nthe center of the dialog, in a two-column table.\n\n        entries = [ ]\n\nWe add to that array all the folders in the cwd.  These are links if and\nonly if `navigateFolders` was enabled in the features set.\n\nFirst, the link to the parent folder, if and only if we're not at the\nfilesystem root.\n\n        if fsToBrowse.getCwd() isnt FileSystem::pathSeparator\n            I = icon 'up-arrow'\n            T = 'Parent folder'\n            if features.navigateFolders\n                action = -> changeFolder '..'\n                I = makeActionLink I, 'Go up to parent folder', action\n                T = makeActionLink T, 'Go up to parent folder', action\n            entries.push rowOf3 I, T\n\nNext, the links to all other folders in the cwd.  These are just like the\nparent folder, except they can also be deleted or moved, if and only if the\n`deleteFolders` or `moveFolders` feature is enabled in the features set.\n\n        for folder in fsToBrowse.ls '.', 'folders'\n            I = icon 'folder'\n            T = folder\n            if features.navigateFolders\n                do ( folder ) ->\n                    action = -> changeFolder folder\n                    I = makeActionLink I, 'Enter folder ' + folder, action\n                    T = makeActionLink T, 'Enter folder ' + folder, action\n            X = ''\n            if features.deleteFolders\n                do ( folder ) ->\n                    X += makeActionLink icon( 'delete' ),\n                        'Delete folder ' + folder, ->\n                            askToDeleteEntry folder\n            if features.moveFolders\n                do ( folder ) ->\n                    X += makeActionLink icon( 'move' ),\n                        'Move folder ' + folder, ->\n                            window.fileBeingMoved = name : folder\n                            fileBeingMoved.path = fsToBrowse.getCwd()\n                            fileBeingMoved.full = fileBeingMoved.path\n                            sep = FileSystem::pathSeparator\n                            if fileBeingMoved.full[-1..] isnt sep\n                                fileBeingMoved.full += sep\n                            fileBeingMoved.full += folder\n                            fileBeingMoved.copy = no\n                            fileBrowserMode = 'save file'\n                            updateFileBrowser()\n            entries.push rowOf3 I, T, X\n\nAfter the folders in the cwd, we also list all the files in the cwd.  These\ncannot be navigated, but they can be deleted, moved, copied, or selected if\nand only if the `deleteFiles`, `moveFiles`, `copyFiles`, or `selectFile`\nfeature is enabled in the features set.\n\nAlso, files can be filtered using a drop-down list of extensions.  Let's\nfind out if the user has picked an item from that list.\n\n        filter = fileFilter?.options[fileFilter?.selectedIndex].value\n        if filter is '*.*' then filter = null else filter = filter?[1..]\n\nNow proceed to examine all the files.\n\n        for file in fsToBrowse.ls '.', 'files'\n            if filter and file[-filter.length..] isnt filter then continue\n            I = icon 'text-file'\n            T = file\n            if features.filesDisabled\n                T = \"<font color='#888888'>#{T}</font>\"\n            else if features.selectFile\n                do ( file ) ->\n                    action = -> selectFile file\n                    I = makeActionLink I, 'Open ' + file, action\n                    T = makeActionLink T, 'Open ' + file, action\n            if features.fileNameTextBox\n                do ( file ) ->\n                    action = ->\n                        saveFileName.value = file\n                        saveBoxKeyPressed()\n                    I = makeActionLink I, 'Save as ' + file, action\n                    T = makeActionLink T, 'Save as ' + file, action\n            X = ''\n            if features.deleteFiles\n                do ( file ) ->\n                    X += makeActionLink icon( 'delete' ),\n                        'Delete file ' + file, ->\n                            askToDeleteEntry file\n            if features.moveFiles\n                do ( file ) ->\n                    X += makeActionLink icon( 'move' ),\n                        'Move file ' + file, ->\n                            window.fileBeingMoved = name : file\n                            fileBeingMoved.path = fsToBrowse.getCwd()\n                            fileBeingMoved.full = fileBeingMoved.path\n                            sep = FileSystem::pathSeparator\n                            if fileBeingMoved.full[-1..] isnt sep\n                                fileBeingMoved.full += sep\n                            fileBeingMoved.full += file\n                            fileBeingMoved.copy = no\n                            fileBrowserMode = 'save file'\n                            updateFileBrowser()\n            if features.copyFiles\n                do ( file ) ->\n                    X += makeActionLink icon( 'copy' ),\n                        'Copy file ' + file, ->\n                            window.fileBeingMoved = name : file\n                            fileBeingMoved.path = fsToBrowse.getCwd()\n                            fileBeingMoved.full = fileBeingMoved.path\n                            sep = FileSystem::pathSeparator\n                            if fileBeingMoved.full[-1..] isnt sep\n                                fileBeingMoved.full += sep\n                            fileBeingMoved.full += file\n                            fileBeingMoved.copy = yes\n                            fileBrowserMode = 'save file'\n                            updateFileBrowser()\n            entry = rowOf3 I, T, X\n            if fileToBeOpened is file then entry = \"SELECT#{entry}\"\n            entries.push entry\n\nNow create the interior of the dialog using the `makeTable` function,\ndefined below.  If the entries list is empty, then we must be at the root\nand there are no files or folders, so in that unusual case, include a\nmessage indicating that the entire filesystem is empty.\n\n        if entries.length is 0 then entries.push '(empty filesystem)'\n        interior = makeTable entries\n\nIf this is a \"save\" dialog, we need a text box into which to type the\nfilename under which we wish to save.  We add it to the status bar, but if\nwe are not in dialog-imitation mode, that will automatically get moved into\nthe content proper.\n\n        titlebar = statusbar = ''\n        if features.fileNameTextBox\n            statusbar += \"File name:\n                          <input id='saveFileName' type='text' size=40\n                                 onkeyup='saveBoxKeyPressed(event);'/>\"\n        if features.extensionFilter\n            extensions = ( \"<option>#{e}</option>\" \\\n                for e in allExtensions() )\n            statusbar += \"File type:\n                          <select id='fileFilter'\n                                  onchange='updateFileBrowser();'>\n                            #{extensions.join '\\n'}\n                          </select>\"\n\nConstruct the HTML for the buttons, which may be used in the status bar or\nabove it.\n\n        for text, index in buttons\n            disable = ''\n            if text is 'Open' and not fileToBeOpened\n                disable = 'disabled=true'\n            buttons[index] = \"<input type='button' value='  #{text}  '\n                               id='statusBarButton#{text}' #{disable}\n                               onclick='buttonClicked(\\\"#{text}\\\");'/>\"\n        buttons = buttons.join ' '\n\nThe interior of the dialog is created.  We will add to it a title bar and a\nstatus bar if and only if we have been asked to do so.  The following code\nchecks to see if we are supposed to imitate a dialog box, and if so, creates\nthe necessary HTML to do so.\n\n        if imitateDialog\n            path = fsToBrowse.getCwd()\n            if path is FileSystem::pathSeparator then path += ' (top level)'\n            titlebar = \"<table border=1 cellpadding=5 cellspacing=0\n                               width=100% height=100%>\n                          <tr height=1%>\n                            <td bgcolor=#cccccc>\n                              <table border=0 cellpadding=0 cellspacing=0\n                                     width=100%>\n                                <tr>\n                                  <td align=left width=33%>\n                                    <b>#{title}</b>\n                                  </td>\n                                  <td align=center width=34%>\n                                    Folder: #{path}\n                                  </td>\n                                  <td align=right width=33%>\n                                    #{icon 'close'}\n                                  </td>\n                                </tr>\n                              </table>\n                            </td>\n                          </tr>\n                          <tr>\n                            <td bgcolor=#fafafa valign=top>\"\n            statusbar = \"   </td>\n                          </tr>\n                          <tr height=1%>\n                            <td bgcolor=#cccccc>\n                              <table border=0 cellpadding=0 cellspacing=0\n                                     width=100%>\n                                <tr>\n                                  <td align=left width=50%>\n                                    #{statusbar}\n                                  </td>\n                                  <td align=right width=50%>\n                                    #{buttons}\n                                  </td>\n                                </tr>\n                              </table>\n                            </td>\n                          </tr>\n                        </table>\"\n\nIf we are not to create a title bar and status bar, then any status bar\ncontent we've already created needs to be embedded in the document itself\ninstead.  In the special case where we are moving or copying a file, and\nthus we need save/cancel buttons, and yet we are not in dialog imitation\nmode, we move those buttons into the statusbar, so that they will be\nembedded in the interior of the dialog.\n\n        else\n            if window.fileBeingMoved.name\n                statusbar += \" &nbsp; \" + buttons\n            statusbar = \"<div style='position: absolute; bottom: 0;\n                                     width: 90%; margin-bottom: 5px;'>\n                           <center>#{statusbar}</center>\n                         </div>\"\n\nPlace the final result in the document.\n\nIf there is a \"save file\" text box, preserve its contents across changes to\nthe DOM.  Do the same for a \"file type\" drop-down list.\n\nAlso, there is a global variable that can be set to contain the name of the\nfile being moved, when a move operation is in process; if that is the case,\nthen use that as the save filename.\n\n        oldName = saveFileName?.value or fileBeingMoved?.name\n        oldIndex = fileFilter?.selectedIndex\n        document.body.innerHTML = titlebar + interior + statusbar\n        if oldName and saveFileName? then saveFileName.value = oldName\n        if oldIndex and fileFilter? then fileFilter.selectedIndex = oldIndex\n        saveBoxKeyPressed()\n        if saveFileName? then saveFileName.focus()\n\nThe above function depends on a handler to enable/disable the Save button\nbased on whether the file name has been filled in.  The following function\nis that handler.  It also simulates Save/Cancel button presses in response\nto Enter/Escape key presses, respectively.\n\n    window.saveBoxKeyPressed = ( event ) ->\n        name = saveFileName?.value\n        statusBarButtonSave?.disabled = !name\n        if typeof name is 'string'\n            tellPage [ 'saveFileNameChanged', name ]\n        if event?.keyCode is 13 then return buttonClicked 'Save'\n        if event?.keyCode is 27 then return buttonClicked 'Cancel'\n\nThe following utility function makes a two-column table out of the string\narray given as input.  This is useful for populating the file dialog.\n\n    makeTable = ( entries ) ->\n        result = '<table border=0 width=100% cellspacing=5 cellpadding=5>'\n        half = Math.ceil entries.length/2\n        for i in [0...half]\n            left = entries[i]\n            lcolor = 'bgcolor=#e8e8e8'\n            if left[...6] is 'SELECT'\n                lcolor = 'bgcolor=#ddddff'\n                left = left[6..]\n            right = entries[i+half]\n            rcolor = 'bgcolor=#e8e8e8'\n            if not right then rcolor = ''\n            else if right[...6] is 'SELECT'\n                rcolor = 'bgcolor=#ddddff'\n                right = right[6..]\n            result += \"<tr>\n                         <td width=50% #{lcolor}>#{left}</td>\n                         <td width=50% #{rcolor}>#{right or ''}</td>\n                       </tr>\"\n        result + '</table>'\n\nThe following utility function makes a link that calls a script function.\n\n    window.actionLinks = [ ]\n    clearActionLinks = -> actionLinks = [ ]\n    makeActionLink = ( text, tooltip, func ) ->\n        number = actionLinks.length\n        actionLinks.push func\n        \"<a href='javascript:void(0);' title='#{tooltip}'\n            onclick='actionLinks[#{number}]();'>#{text}</a>\"\n\nThe following utility function makes an icon from one in the demo folder.\n\n    icon = ( name ) -> \"<img src='#{name}.png'>\"\n\nThe following utility function makes a three-part row, where the first part\nis an icon (or empty), the second part is left-justified text, and the third\npart is right-justified content (or empty).\n\n    rowOf3 = ( icon, text, more = '' ) ->\n        \"<table border=0 cellpadding=0 cellspacing=0 width=100%><tr>\n         <td width=22>#{icon or ''}</td>\n         <td align=left>#{text} &nbsp; &nbsp; </td>\n         <td align=left width=66><nobr>#{more}</nobr></td></tr></table>\"\n\nThe following utility function finds all extensions on all files in the\nwhole filesystem, and returns them in alphabetical order.  This is useful\nfor creating a drop-down list of extensions for filtering in the \"open\"\nversion of the dialog.\n\n    allExtensions = ( F = null ) ->\n        if not F then F = new FileSystem fsToBrowse.getName()\n        result = [ '*.*' ]\n        for file in F.ls '.', 'files'\n            extension = /\\.[^.]*?$/.exec file\n            if extension\n                extension = '*' + extension\n                if extension not in result then result.push extension\n        for folder in F.ls '.', 'folders'\n            F.cd folder\n            for extension in allExtensions F\n                if extension not in result then result.push extension\n            F.cd '..'\n        result.sort()\n"]}